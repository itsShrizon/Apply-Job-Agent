[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.base",
        "description": "app.core.base",
        "isExtraImport": true,
        "detail": "app.core.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.base",
        "description": "app.core.base",
        "isExtraImport": true,
        "detail": "app.core.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.base",
        "description": "app.core.base",
        "isExtraImport": true,
        "detail": "app.core.base",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.features.auth.models",
        "description": "app.features.auth.models",
        "isExtraImport": true,
        "detail": "app.features.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.features.auth.models",
        "description": "app.features.auth.models",
        "isExtraImport": true,
        "detail": "app.features.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.features.auth.models",
        "description": "app.features.auth.models",
        "isExtraImport": true,
        "detail": "app.features.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.features.auth.models",
        "description": "app.features.auth.models",
        "isExtraImport": true,
        "detail": "app.features.auth.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.features.resume.models",
        "description": "app.features.resume.models",
        "isExtraImport": true,
        "detail": "app.features.resume.models",
        "documentation": {}
    },
    {
        "label": "Resume",
        "importPath": "app.features.resume.models",
        "description": "app.features.resume.models",
        "isExtraImport": true,
        "detail": "app.features.resume.models",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "AnyUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BeforeValidator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PostgresDsn",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "computed_field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "MultiHostUrl",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Security",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt.exceptions",
        "description": "jwt.exceptions",
        "isExtraImport": true,
        "detail": "jwt.exceptions",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.core.session",
        "description": "app.core.session",
        "isExtraImport": true,
        "detail": "app.core.session",
        "documentation": {}
    },
    {
        "label": "TokenPayload",
        "importPath": "app.features.auth.schemas",
        "description": "app.features.auth.schemas",
        "isExtraImport": true,
        "detail": "app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.features.auth.schemas",
        "description": "app.features.auth.schemas",
        "isExtraImport": true,
        "detail": "app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "CreateUser",
        "importPath": "app.features.auth.schemas",
        "description": "app.features.auth.schemas",
        "isExtraImport": true,
        "detail": "app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "AuthenticatedUser",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "AuthenticatedUser",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "AuthenticatedUser",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "AuthenticatedUser",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.core.dependencies",
        "description": "app.core.dependencies",
        "isExtraImport": true,
        "detail": "app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "services",
        "importPath": "app.features.auth",
        "description": "app.features.auth",
        "isExtraImport": true,
        "detail": "app.features.auth",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.features.jobs.schemas",
        "description": "app.features.jobs.schemas",
        "isExtraImport": true,
        "detail": "app.features.jobs.schemas",
        "documentation": {}
    },
    {
        "label": "JobSearchInput",
        "importPath": "app.features.jobs.schemas",
        "description": "app.features.jobs.schemas",
        "isExtraImport": true,
        "detail": "app.features.jobs.schemas",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "app.features.jobs.services",
        "description": "app.features.jobs.services",
        "isExtraImport": true,
        "detail": "app.features.jobs.services",
        "documentation": {}
    },
    {
        "label": "ResumeService",
        "importPath": "app.features.resume.services",
        "description": "app.features.resume.services",
        "isExtraImport": true,
        "detail": "app.features.resume.services",
        "documentation": {}
    },
    {
        "label": "CustomResumeBuilder",
        "importPath": "app.features.resume.services",
        "description": "app.features.resume.services",
        "isExtraImport": true,
        "detail": "app.features.resume.services",
        "documentation": {}
    },
    {
        "label": "ResumeService",
        "importPath": "app.features.resume.services",
        "description": "app.features.resume.services",
        "isExtraImport": true,
        "detail": "app.features.resume.services",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "PydanticOutputParser",
        "importPath": "langchain.output_parsers",
        "description": "langchain.output_parsers",
        "isExtraImport": true,
        "detail": "langchain.output_parsers",
        "documentation": {}
    },
    {
        "label": "PydanticOutputParser",
        "importPath": "langchain.output_parsers",
        "description": "langchain.output_parsers",
        "isExtraImport": true,
        "detail": "langchain.output_parsers",
        "documentation": {}
    },
    {
        "label": "scrape_jobs",
        "importPath": "jobspy",
        "description": "jobspy",
        "isExtraImport": true,
        "detail": "jobspy",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "jobspy.model",
        "description": "jobspy.model",
        "isExtraImport": true,
        "detail": "jobspy.model",
        "documentation": {}
    },
    {
        "label": "gpt_model",
        "importPath": "app.shared.llm.llm_model",
        "description": "app.shared.llm.llm_model",
        "isExtraImport": true,
        "detail": "app.shared.llm.llm_model",
        "documentation": {}
    },
    {
        "label": "gpt_model",
        "importPath": "app.shared.llm.llm_model",
        "description": "app.shared.llm.llm_model",
        "isExtraImport": true,
        "detail": "app.shared.llm.llm_model",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "CustomResumeRequest",
        "importPath": "app.features.resume.schemas",
        "description": "app.features.resume.schemas",
        "isExtraImport": true,
        "detail": "app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "ResumeParseResponse",
        "importPath": "app.features.resume.schemas",
        "description": "app.features.resume.schemas",
        "isExtraImport": true,
        "detail": "app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "ResumeParseResponse",
        "importPath": "app.features.resume.schemas",
        "description": "app.features.resume.schemas",
        "isExtraImport": true,
        "detail": "app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "pymupdf4llm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymupdf4llm",
        "description": "pymupdf4llm",
        "detail": "pymupdf4llm",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "JsonOutputParser",
        "importPath": "langchain_core.output_parsers",
        "description": "langchain_core.output_parsers",
        "isExtraImport": true,
        "detail": "langchain_core.output_parsers",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "get_openapi",
        "importPath": "fastapi.openapi.utils",
        "description": "fastapi.openapi.utils",
        "isExtraImport": true,
        "detail": "fastapi.openapi.utils",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.features.resume.routers",
        "description": "app.features.resume.routers",
        "isExtraImport": true,
        "detail": "app.features.resume.routers",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.features.jobs.routers",
        "description": "app.features.jobs.routers",
        "isExtraImport": true,
        "detail": "app.features.jobs.routers",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.features.auth.routers",
        "description": "app.features.auth.routers",
        "isExtraImport": true,
        "detail": "app.features.auth.routers",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.096cd2632935_relationship_table",
        "description": "apply-job-agent-backend.alembic.versions.096cd2632935_relationship_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.096cd2632935_relationship_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.096cd2632935_relationship_table",
        "description": "apply-job-agent-backend.alembic.versions.096cd2632935_relationship_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.096cd2632935_relationship_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.0ac4475a51f6_create_resume_table",
        "description": "apply-job-agent-backend.alembic.versions.0ac4475a51f6_create_resume_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('resumes',\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('user_id', sa.UUID(), nullable=False),\n    sa.Column('title', sa.String(), nullable=False),\n    sa.Column('resume_data', sa.JSON(), nullable=False),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),",
        "detail": "apply-job-agent-backend.alembic.versions.0ac4475a51f6_create_resume_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.0ac4475a51f6_create_resume_table",
        "description": "apply-job-agent-backend.alembic.versions.0ac4475a51f6_create_resume_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_resumes_id'), table_name='resumes')\n    op.drop_table('resumes')\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.0ac4475a51f6_create_resume_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.53cab95c0642_update_create_table",
        "description": "apply-job-agent-backend.alembic.versions.53cab95c0642_update_create_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('first_name', sa.String(), nullable=False),\n    sa.Column('last_name', sa.String(), nullable=False),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('position', sa.String(), nullable=False),\n    sa.Column('password', sa.String(), nullable=False),",
        "detail": "apply-job-agent-backend.alembic.versions.53cab95c0642_update_create_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.53cab95c0642_update_create_table",
        "description": "apply-job-agent-backend.alembic.versions.53cab95c0642_update_create_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_users_id'), table_name='users')\n    op.drop_index(op.f('ix_users_email'), table_name='users')\n    op.drop_table('users')\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.53cab95c0642_update_create_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.90639da4ca0c_update_create_table",
        "description": "apply-job-agent-backend.alembic.versions.90639da4ca0c_update_create_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'position')\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('position', sa.VARCHAR(), autoincrement=False, nullable=False))\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.90639da4ca0c_update_create_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.90639da4ca0c_update_create_table",
        "description": "apply-job-agent-backend.alembic.versions.90639da4ca0c_update_create_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('position', sa.VARCHAR(), autoincrement=False, nullable=False))\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.90639da4ca0c_update_create_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.b8b5f5a28a2e_update_resume_table",
        "description": "apply-job-agent-backend.alembic.versions.b8b5f5a28a2e_update_resume_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('resumes', 'title')\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('resumes', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False))\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.b8b5f5a28a2e_update_resume_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.versions.b8b5f5a28a2e_update_resume_table",
        "description": "apply-job-agent-backend.alembic.versions.b8b5f5a28a2e_update_resume_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('resumes', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False))\n    # ### end Alembic commands ###",
        "detail": "apply-job-agent-backend.alembic.versions.b8b5f5a28a2e_update_resume_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.env",
        "description": "apply-job-agent-backend.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "apply-job-agent-backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "apply-job-agent-backend.alembic.env",
        "description": "apply-job-agent-backend.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "apply-job-agent-backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "apply-job-agent-backend.alembic.env",
        "description": "apply-job-agent-backend.alembic.env",
        "peekOfCode": "config = context.config\n# Set database url from app core settings\nsection = config.config_ini_section\nconfig.set_section_option(section, \"DATABASE_URL\", str(settings.SQLALCHEMY_DATABASE_URI))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support",
        "detail": "apply-job-agent-backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 5,
        "importPath": "apply-job-agent-backend.alembic.env",
        "description": "apply-job-agent-backend.alembic.env",
        "peekOfCode": "section = config.config_ini_section\nconfig.set_section_option(section, \"DATABASE_URL\", str(settings.SQLALCHEMY_DATABASE_URI))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "apply-job-agent-backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "apply-job-agent-backend.alembic.env",
        "description": "apply-job-agent-backend.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "apply-job-agent-backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.core.base",
        "description": "apply-job-agent-backend.app.core.base",
        "peekOfCode": "class Base(DeclarativeBase):\n    \"\"\"Base class for all SQLAlchemy models.\"\"\"\n    pass\n# Import models here so they are registered with Base:\nfrom app.features.auth.models import *\nfrom app.features.resume.models import *",
        "detail": "apply-job-agent-backend.app.core.base",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.core.config",
        "description": "apply-job-agent-backend.app.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    model_config = SettingsConfigDict(\n        # Use top level .env file (one level above ./backend/)\n        env_file=\".env\",\n        env_ignore_empty=True,\n        extra=\"ignore\",\n    )\n    API_V1_STR: str = \"/api/v1\"\n    # Use environment variable for SECRET_KEY or fallback to a default\n    SECRET_KEY: str = os.environ.get(\"SECRET_KEY\", \"e0723-c56gdbh-7hd3a5bf-84d26b0e-9c5a7d8f-e12c4b6ay\")",
        "detail": "apply-job-agent-backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "parse_cors",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.core.config",
        "description": "apply-job-agent-backend.app.core.config",
        "peekOfCode": "def parse_cors(v: Any) -> list[str] | str:\n    if isinstance(v, str) and not v.startswith(\"[\"):\n        return [i.strip() for i in v.split(\",\")]\n    elif isinstance(v, list | str):\n        return v\n    raise ValueError(v)\nclass Settings(BaseSettings):\n    model_config = SettingsConfigDict(\n        # Use top level .env file (one level above ./backend/)\n        env_file=\".env\",",
        "detail": "apply-job-agent-backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.config",
        "description": "apply-job-agent-backend.app.core.config",
        "peekOfCode": "settings = Settings()  # type: ignore",
        "detail": "apply-job-agent-backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.core.dependencies",
        "description": "apply-job-agent-backend.app.core.dependencies",
        "peekOfCode": "def get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency for getting a database session.\n    Yields:\n        Session: SQLAlchemy session\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "apply-job-agent-backend.app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.core.dependencies",
        "description": "apply-job-agent-backend.app.core.dependencies",
        "peekOfCode": "def get_current_user(\n    session: SessionDep, \n    token: TokenDep\n) -> User:\n    \"\"\"\n    Verify token and return current user.\n    Args:\n        session: Database session\n        token: JWT token from OAuth2 bearer\n    Returns:",
        "detail": "apply-job-agent-backend.app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.dependencies",
        "description": "apply-job-agent-backend.app.core.dependencies",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"/auth/login\",  # Must include the leading slash to match the actual endpoint path\n    scheme_name=\"JWT\"  # Name displayed in Swagger UI\n)\n# Alternative security scheme for more flexibility\nsecurity = HTTPBearer()\ndef get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency for getting a database session.\n    Yields:",
        "detail": "apply-job-agent-backend.app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "security",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.dependencies",
        "description": "apply-job-agent-backend.app.core.dependencies",
        "peekOfCode": "security = HTTPBearer()\ndef get_db() -> Generator[Session, None, None]:\n    \"\"\"\n    Dependency for getting a database session.\n    Yields:\n        Session: SQLAlchemy session\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "apply-job-agent-backend.app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "SessionDep",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.dependencies",
        "description": "apply-job-agent-backend.app.core.dependencies",
        "peekOfCode": "SessionDep = Annotated[Session, Depends(get_db)]\nTokenDep = Annotated[str, Depends(oauth2_scheme)]\ndef get_current_user(\n    session: SessionDep, \n    token: TokenDep\n) -> User:\n    \"\"\"\n    Verify token and return current user.\n    Args:\n        session: Database session",
        "detail": "apply-job-agent-backend.app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "TokenDep",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.dependencies",
        "description": "apply-job-agent-backend.app.core.dependencies",
        "peekOfCode": "TokenDep = Annotated[str, Depends(oauth2_scheme)]\ndef get_current_user(\n    session: SessionDep, \n    token: TokenDep\n) -> User:\n    \"\"\"\n    Verify token and return current user.\n    Args:\n        session: Database session\n        token: JWT token from OAuth2 bearer",
        "detail": "apply-job-agent-backend.app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "AuthenticatedUser",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.dependencies",
        "description": "apply-job-agent-backend.app.core.dependencies",
        "peekOfCode": "AuthenticatedUser = Annotated[User, Depends(get_current_user)]",
        "detail": "apply-job-agent-backend.app.core.dependencies",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.core.security",
        "description": "apply-job-agent-backend.app.core.security",
        "peekOfCode": "def create_access_token(subject: str | Any, expires_delta: timedelta) -> str:\n    \"\"\"\n    Create a JWT access token.\n    Args:\n        subject: The subject of the token (user ID)\n        expires_delta: Token expiration time\n    Returns:\n        str: Encoded JWT token\n    \"\"\"\n    expire = datetime.now(timezone.utc) + expires_delta",
        "detail": "apply-job-agent-backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.core.security",
        "description": "apply-job-agent-backend.app.core.security",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)",
        "detail": "apply-job-agent-backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.core.security",
        "description": "apply-job-agent-backend.app.core.security",
        "peekOfCode": "def get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)",
        "detail": "apply-job-agent-backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.security",
        "description": "apply-job-agent-backend.app.core.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nALGORITHM = \"HS256\"\ndef create_access_token(subject: str | Any, expires_delta: timedelta) -> str:\n    \"\"\"\n    Create a JWT access token.\n    Args:\n        subject: The subject of the token (user ID)\n        expires_delta: Token expiration time\n    Returns:\n        str: Encoded JWT token",
        "detail": "apply-job-agent-backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.security",
        "description": "apply-job-agent-backend.app.core.security",
        "peekOfCode": "ALGORITHM = \"HS256\"\ndef create_access_token(subject: str | Any, expires_delta: timedelta) -> str:\n    \"\"\"\n    Create a JWT access token.\n    Args:\n        subject: The subject of the token (user ID)\n        expires_delta: Token expiration time\n    Returns:\n        str: Encoded JWT token\n    \"\"\"",
        "detail": "apply-job-agent-backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.session",
        "description": "apply-job-agent-backend.app.core.session",
        "peekOfCode": "DATABASE_URL = 'postgresql://BTLogin:LetMeIn123!@btsql.postgres.database.azure.com/BTDB'\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "apply-job-agent-backend.app.core.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.session",
        "description": "apply-job-agent-backend.app.core.session",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "apply-job-agent-backend.app.core.session",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.core.session",
        "description": "apply-job-agent-backend.app.core.session",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "apply-job-agent-backend.app.core.session",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.auth.models",
        "description": "apply-job-agent-backend.app.features.auth.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)\n    password = Column(String, nullable=False)  # In production, store a hashed version\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    # Relationship with Resume model\n    resumes = relationship(\"Resume\", back_populates=\"user\")",
        "detail": "apply-job-agent-backend.app.features.auth.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.features.auth.routers",
        "description": "apply-job-agent-backend.app.features.auth.routers",
        "peekOfCode": "router = APIRouter(prefix=\"/auth\", tags=[\"auth\"])\n@router.post(\n    \"/signup\", \n    response_model=Token,\n    status_code=status.HTTP_201_CREATED,\n    summary=\"Create new user account\",\n    description=\"Register a new user account and return access token for authentication.\"\n)\nasync def register_user(\n    user_create: CreateUser,",
        "detail": "apply-job-agent-backend.app.features.auth.routers",
        "documentation": {}
    },
    {
        "label": "CreateUser",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.auth.schemas",
        "description": "apply-job-agent-backend.app.features.auth.schemas",
        "peekOfCode": "class CreateUser(BaseModel):\n    # user_id: str = Field(description=\"The unique identifier for the user.\")\n    first_name: str = Field(description=\"The first name of the user.\")\n    last_name: str = Field(description=\"The last name of the user.\")\n    email: str = Field(description=\"The email address of the user.\")\n    password: str = Field(description=\"The password of the user.\")\nclass LoginUser(BaseModel):\n    email: str = Field(description=\"The email address of the user.\")\n    password: str = Field(description=\"The password of the user.\")\n# Contents of JWT token",
        "detail": "apply-job-agent-backend.app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "LoginUser",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.auth.schemas",
        "description": "apply-job-agent-backend.app.features.auth.schemas",
        "peekOfCode": "class LoginUser(BaseModel):\n    email: str = Field(description=\"The email address of the user.\")\n    password: str = Field(description=\"The password of the user.\")\n# Contents of JWT token\nclass TokenPayload(BaseModel):\n    sub: str = Field(description=\"Subject (user ID)\")\n    exp: int = Field(description=\"Expiration timestamp\")\nclass Token(BaseModel):\n    access_token: str = Field(description=\"The access token for the user.\")\n    token_type: str = Field(description=\"The type of the token.\")",
        "detail": "apply-job-agent-backend.app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "TokenPayload",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.auth.schemas",
        "description": "apply-job-agent-backend.app.features.auth.schemas",
        "peekOfCode": "class TokenPayload(BaseModel):\n    sub: str = Field(description=\"Subject (user ID)\")\n    exp: int = Field(description=\"Expiration timestamp\")\nclass Token(BaseModel):\n    access_token: str = Field(description=\"The access token for the user.\")\n    token_type: str = Field(description=\"The type of the token.\")\n    first_name: str = Field(description=\"The first name of the user.\")\n    last_name: str = Field(description=\"The last name of the user.\")\n    email: str = Field(description=\"The email address of the user.\")\n# User response model for API",
        "detail": "apply-job-agent-backend.app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.auth.schemas",
        "description": "apply-job-agent-backend.app.features.auth.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str = Field(description=\"The access token for the user.\")\n    token_type: str = Field(description=\"The type of the token.\")\n    first_name: str = Field(description=\"The first name of the user.\")\n    last_name: str = Field(description=\"The last name of the user.\")\n    email: str = Field(description=\"The email address of the user.\")\n# User response model for API\nclass UserResponse(BaseModel):\n    id: UUID = Field(description=\"The unique identifier for the user.\")\n    first_name: str = Field(description=\"The first name of the user.\")",
        "detail": "apply-job-agent-backend.app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.auth.schemas",
        "description": "apply-job-agent-backend.app.features.auth.schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: UUID = Field(description=\"The unique identifier for the user.\")\n    first_name: str = Field(description=\"The first name of the user.\")\n    last_name: str = Field(description=\"The last name of the user.\")\n    email: str = Field(description=\"The email address of the user.\")\n    created_at: Optional[str] = Field(None, description=\"The creation date of the user account.\")\n    class Config:\n        from_attributes = True",
        "detail": "apply-job-agent-backend.app.features.auth.schemas",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.features.auth.services",
        "description": "apply-job-agent-backend.app.features.auth.services",
        "peekOfCode": "def create_user(user_create: CreateUser, session: Session) -> User:\n    \"\"\"\n    Create a new user in the database.\n    This function takes user data, securely hashes the password, and stores\n    the user information in the database.\n    Args:\n        user_create (CreateUser): Pydantic schema containing validated user data\n        db (Session): SQLAlchemy database session\n    Returns:\n        User: The newly created user model instance with database ID",
        "detail": "apply-job-agent-backend.app.features.auth.services",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.features.auth.services",
        "description": "apply-job-agent-backend.app.features.auth.services",
        "peekOfCode": "def authenticate(session, email: str, password: str) -> User | None:\n    \"\"\"\n    Authenticates a user with the provided email and password.\n    Args:\n        session: The database session.\n        email (str): The email of the user trying to authenticate.\n        password (str): The password of the user trying to authenticate.\n    Returns:\n        User | None: The authenticated User object if credentials are valid, None otherwise.\n            Returns None if:",
        "detail": "apply-job-agent-backend.app.features.auth.services",
        "documentation": {}
    },
    {
        "label": "get_user_by_email",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.features.auth.services",
        "description": "apply-job-agent-backend.app.features.auth.services",
        "peekOfCode": "def get_user_by_email(session, email: str) -> User | None:\n    user = session.query(User).filter(User.email == email).first()\n    if user:\n        return user\n    return None",
        "detail": "apply-job-agent-backend.app.features.auth.services",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.features.jobs.routers",
        "description": "apply-job-agent-backend.app.features.jobs.routers",
        "peekOfCode": "router = APIRouter(prefix=\"/jobs\", tags=[\"Jobs\"])\n@router.post(\"/get-jobs\")\nasync def get_jobs(\n    current_user: AuthenticatedUser,\n    db: Session = Depends(get_db)\n):\n    try:\n        # Get the resume information from the authenticated user\n        resume_information = ResumeService.get_resume_data_from_db(current_user, db)\n        # Check if resume information is available",
        "detail": "apply-job-agent-backend.app.features.jobs.routers",
        "documentation": {}
    },
    {
        "label": "GetJobsRequest",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.jobs.schemas",
        "description": "apply-job-agent-backend.app.features.jobs.schemas",
        "peekOfCode": "class GetJobsRequest(BaseModel):\n    resume_information: dict = Field(description=\"Resume information extracted from the resume parser.\")\nclass JobSearchInput(BaseModel):\n    job_title: str = Field(description=\"The title of the search job.\")\n    location: str = Field(description=\"Personal location or address.\")\n    google_search_text: str = Field(description=\"The text to be used for Google search.\")\n    country: str = Field(description=\"The country of the user.\")\n    city: str = Field(description=\"The city of the user.\")",
        "detail": "apply-job-agent-backend.app.features.jobs.schemas",
        "documentation": {}
    },
    {
        "label": "JobSearchInput",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.jobs.schemas",
        "description": "apply-job-agent-backend.app.features.jobs.schemas",
        "peekOfCode": "class JobSearchInput(BaseModel):\n    job_title: str = Field(description=\"The title of the search job.\")\n    location: str = Field(description=\"Personal location or address.\")\n    google_search_text: str = Field(description=\"The text to be used for Google search.\")\n    country: str = Field(description=\"The country of the user.\")\n    city: str = Field(description=\"The city of the user.\")",
        "detail": "apply-job-agent-backend.app.features.jobs.schemas",
        "documentation": {}
    },
    {
        "label": "JobService",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.jobs.services",
        "description": "apply-job-agent-backend.app.features.jobs.services",
        "peekOfCode": "class JobService:\n    @staticmethod\n    def get_job_search_input(resume_information):\n        try:\n            with open(\"app/shared/prompts/job_search_input.md\", \"r\") as file:\n                prompt = file.read()\n            # Output parser for the LLM\n            parser = PydanticOutputParser(pydantic_object=JobSearchInput)\n            # Create a prompt template\n            prompt_template = PromptTemplate(",
        "detail": "apply-job-agent-backend.app.features.jobs.services",
        "documentation": {}
    },
    {
        "label": "Resume",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.models",
        "description": "apply-job-agent-backend.app.features.resume.models",
        "peekOfCode": "class Resume(Base):\n    \"\"\"Model for storing user resumes.\"\"\"\n    __tablename__ = \"resumes\"\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), nullable=False)\n    resume_data = Column(JSON, nullable=False)  # JSON column to store ResumeParseResponse\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    # Relationship with User model (assuming you have one)\n    user = relationship(\"User\", back_populates=\"resumes\")",
        "detail": "apply-job-agent-backend.app.features.resume.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.features.resume.routers",
        "description": "apply-job-agent-backend.app.features.resume.routers",
        "peekOfCode": "router = APIRouter(prefix=\"/resume\", tags=[\"Resume\"])\n@router.post(\n    \"/upload\", \n    response_model=ResumeParseResponse\n)\nasync def upload_resume(\n    file: UploadFile,\n    current_user: AuthenticatedUser,\n    db: Session = Depends(get_db)\n) -> ResumeParseResponse:",
        "detail": "apply-job-agent-backend.app.features.resume.routers",
        "documentation": {}
    },
    {
        "label": "EmploymentDates",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class EmploymentDates(BaseModel):\n    start: Optional[str] = None\n    end: Optional[str] = None\nclass WorkExperience(BaseModel):\n    job_title: Optional[str] = None\n    company_name: Optional[str] = None\n    employment_dates: Optional[EmploymentDates] = None\n    location: Optional[str] = None\n    responsibilities_achievements: Optional[List[str]] = None\nclass Education(BaseModel):",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "WorkExperience",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class WorkExperience(BaseModel):\n    job_title: Optional[str] = None\n    company_name: Optional[str] = None\n    employment_dates: Optional[EmploymentDates] = None\n    location: Optional[str] = None\n    responsibilities_achievements: Optional[List[str]] = None\nclass Education(BaseModel):\n    degree_earned: Optional[str] = None\n    field_of_study: Optional[str] = None\n    institution_name: Optional[str] = None",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "Education",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class Education(BaseModel):\n    degree_earned: Optional[str] = None\n    field_of_study: Optional[str] = None\n    institution_name: Optional[str] = None\n    graduation_year: Optional[str] = None\n    location: Optional[str] = None\n    cgpa: Optional[str] = None\n    gpa: Optional[str] = None\nclass Skills(BaseModel):\n    technical_skills: Optional[List[str]] = None",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "Skills",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class Skills(BaseModel):\n    technical_skills: Optional[List[str]] = None\n    soft_skills: Optional[List[str]] = None\n    certifications: Optional[List[str]] = None\n    languages: Optional[List[str]] = None\n    interests: Optional[List[str]] = None\n    hobbies: Optional[List[str]] = None\n    awards: Optional[List[str]] = None\n    volunteer_experience: Optional[List[str]] = None\nclass Project(BaseModel):",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class Project(BaseModel):\n    project_name: Optional[str] = None\n    description: Optional[str] = None\n    technologies_used: Optional[List[str]] = None\n    github_link: Optional[str] = None\n    live_link: Optional[str] = None\nclass Certifications(BaseModel):\n    certification_name: Optional[str] = None\n    issuing_organization: Optional[str] = None\n    issue_date: Optional[str] = None",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "Certifications",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class Certifications(BaseModel):\n    certification_name: Optional[str] = None\n    issuing_organization: Optional[str] = None\n    issue_date: Optional[str] = None\nclass Publications(BaseModel):\n    title: Optional[str] = None\n    publication_date: Optional[str] = None\n    journal_name: Optional[str] = None\n    link: Optional[str] = None\nclass PersonalInformation(BaseModel):",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "Publications",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class Publications(BaseModel):\n    title: Optional[str] = None\n    publication_date: Optional[str] = None\n    journal_name: Optional[str] = None\n    link: Optional[str] = None\nclass PersonalInformation(BaseModel):\n    full_name: Optional[str] = None\n    email_address: Optional[str] = None\n    phone_number: Optional[str] = None\n    location: Optional[str] = None",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "PersonalInformation",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class PersonalInformation(BaseModel):\n    full_name: Optional[str] = None\n    email_address: Optional[str] = None\n    phone_number: Optional[str] = None\n    location: Optional[str] = None\n    linkedin_profile: Optional[str] = None\n    github_profile: Optional[str] = None\n    codeforces_profile: Optional[str] = None\n    leetcode_profile: Optional[str] = None\n    personal_website: Optional[str] = None",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "ResumeParseResponse",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class ResumeParseResponse(BaseModel):\n    personal_information: Optional[PersonalInformation] = None\n    professional_summary: Optional[str] = None\n    work_experience: List[WorkExperience] = None\n    work_experience_summary: Optional[str] = None\n    education: List[Education] = None\n    education_summary: Optional[str] = None\n    certifications: Optional[List[Certifications]] = None\n    publications: Optional[List[Publications]] = None\n    skills: Optional[Skills] = None",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorResponse",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class ErrorResponse(BaseModel):\n    error: str = Field(..., description=\"Error message\")\n    details: Optional[str] = Field(None, description=\"Additional error details\")\nclass CustomResumeRequest(BaseModel):\n    job_description: str = Field(..., description=\"Job description for the resume\")",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "CustomResumeRequest",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.schemas",
        "description": "apply-job-agent-backend.app.features.resume.schemas",
        "peekOfCode": "class CustomResumeRequest(BaseModel):\n    job_description: str = Field(..., description=\"Job description for the resume\")",
        "detail": "apply-job-agent-backend.app.features.resume.schemas",
        "documentation": {}
    },
    {
        "label": "ResumeService",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.services",
        "description": "apply-job-agent-backend.app.features.resume.services",
        "peekOfCode": "class ResumeService:\n    @staticmethod\n    def organize_resume_data(resume_text):\n        \"\"\"\n        Organizes the parsed resume data using a language model.\n        Args:\n            resume_text (str): The raw text extracted from the resume\n        Returns:\n            dict: Structured resume information in JSON format\n        Raises:",
        "detail": "apply-job-agent-backend.app.features.resume.services",
        "documentation": {}
    },
    {
        "label": "CustomResumeBuilder",
        "kind": 6,
        "importPath": "apply-job-agent-backend.app.features.resume.services",
        "description": "apply-job-agent-backend.app.features.resume.services",
        "peekOfCode": "class CustomResumeBuilder:\n    @staticmethod\n    def get_latex_code_from_pydantic_output(job_description, resume_data):\n        \"\"\"\n        Generates LaTeX code from the parsed resume data and job description.\n        Args:\n            job_description (str): The job description text\n            resume_data (ResumeParseResponse): The structured resume data\n        Returns:\n            dict: Contains LaTeX code for the resume and the file path where it was saved",
        "detail": "apply-job-agent-backend.app.features.resume.services",
        "documentation": {}
    },
    {
        "label": "get_llm_model",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.shared.llm.llm_model",
        "description": "apply-job-agent-backend.app.shared.llm.llm_model",
        "peekOfCode": "def get_llm_model(model_name=\"gpt-4o\", temperature=0):\n    \"\"\"\n    Creates and returns a ChatOpenAI model instance.\n    Args:\n        model_name (str): The OpenAI model to use\n        temperature (float): Controls randomness (0 to 1)\n    Returns:\n        ChatOpenAI: An instance of the language model\n    \"\"\"\n    try:",
        "detail": "apply-job-agent-backend.app.shared.llm.llm_model",
        "documentation": {}
    },
    {
        "label": "gpt_model",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.shared.llm.llm_model",
        "description": "apply-job-agent-backend.app.shared.llm.llm_model",
        "peekOfCode": "gpt_model = get_llm_model()",
        "detail": "apply-job-agent-backend.app.shared.llm.llm_model",
        "documentation": {}
    },
    {
        "label": "custom_openapi",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.main",
        "description": "apply-job-agent-backend.app.main",
        "peekOfCode": "def custom_openapi(app: FastAPI):\n    \"\"\"\n    Generate custom OpenAPI schema with security definitions.\n    This adds JWT Bearer authentication to all endpoints except login and signup.\n    \"\"\"\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=app.title,\n        version=app.version,",
        "detail": "apply-job-agent-backend.app.main",
        "documentation": {}
    },
    {
        "label": "create_application",
        "kind": 2,
        "importPath": "apply-job-agent-backend.app.main",
        "description": "apply-job-agent-backend.app.main",
        "peekOfCode": "def create_application() -> FastAPI:\n    \"\"\"Create and configure the FastAPI application.\"\"\"\n    application = FastAPI(\n        title=\"Apply Job Agent API\",\n        description=\"API for Apply Job Agent - Automated job application assistant.\",\n        version=\"0.1\",\n        swagger_ui_parameters={\"persistAuthorization\": True},\n    )\n    # Configure CORS\n    application.add_middleware(",
        "detail": "apply-job-agent-backend.app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "apply-job-agent-backend.app.main",
        "description": "apply-job-agent-backend.app.main",
        "peekOfCode": "app = create_application()\nif __name__ == \"__main__\":\n    \"\"\"Run the application when executed directly.\"\"\"\n    uvicorn.run(\n        \"app.main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True\n    )",
        "detail": "apply-job-agent-backend.app.main",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "description": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "description": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "description": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "description": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "apply-job-agent-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]